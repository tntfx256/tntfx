@use "sass:map";
@use "../lib/animation";

$sizes: (xxs, xs, sm, md, lg, xl, xxl, xxxl);

@each $size in $sizes {
  .elevation-#{$size} {
    filter: drop-shadow(var(--shadow-#{$size}));
  }

  .shadow-#{$size} {
    box-shadow: var(--shadow-#{$size});
  }
}

// Variants
$variants: (primary, secondary, destructive, success, warning, info, error);

@mixin withVariant($variant) {
  color: var(--color-#{$variant});

  &.--contained {
    border-color: var(--color-#{$variant});
    background-color: var(--color-#{$variant});
    color: var(--color-#{$variant}-text);
  }

  &.--outlined {
    border-color: var(--color-#{$variant});
  }
}

@each $variant in $variants {
  .--#{$variant} {
    @include withVariant($variant);
  }
}

// Shapes
.--outlined {
  border: 1px solid var(--color-border);
}
.--contained {
  border-color: var(--color-border);
  background-color: var(--color-element);
  color: var(--color-element-text);
}

// Status
.--selected:not(:disabled, .--disabled) {
  background-color: var(--color-selected);
  color: var(--color-selected-text);
}

// :active:not(:disabled, .--disabled) {
//   background-color: var(--color-active);
//   color: var(--color-active-text);
// }

.--disabled,
:disabled {
  cursor: default;
  filter: opacity(55%) grayscale(100%);
  pointer-events: none;
}

.--hover:hover:not(:disabled, .--disabled, .--selected) {
  cursor: pointer;
  filter: sepia(80%);

  // transition-property: filter;
  // transition-duration: animation.$duration-sm;
  // transition-timing-function: animation.$animation-ease;
}

.--noUserSelect {
  cursor: default;
  user-select: none;
}

// ANIMATION
@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.animation {
  &--rotate {
    animation-duration: calc(3 * animation.$duration-lg);
    animation-iteration-count: infinite;
    animation-name: rotate;
    animation-timing-function: linear;
    transition-property: transform;
  }
}
